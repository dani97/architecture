# Requistion List Flow User Flow
#
# 1.1. Create a requistion List at Customer's My Account section using `createRequistionList` Mutation
#
# 1.2. From catalog pages search for products and add products to already available list with `addProductsToRequisitionList`
#  mutation or create a list with `createRequistionList` and on success add products with `addProductsToRequisitionList`
#
# 1.3. Select a requistion list from My Account and  customer query `requisitionLists` with id filter will fetch requistion
# list details
#
# 1.4 Select a list of items from the requisition List and perform `addRequisitionListItemToCart`, so the items are copied
# to cart
#
# 1.5 perform regular checkout flow
#
# 2. In requistion list view, `exportRequisitionList` query will generate a CSV file with particular requistion list data
#
# 3. In requistion list view, `renameRequistionList` mutatation can be used to rename the list
#
# 4. In requistion list view, one can edit items quantity, options etc or remove items with `removeRequisitionListItems` and
# `updateRequisitionListItems` mutation
#
# 5. In requistion list view, select requistion list items and move them , copy them to different requistion list with
# `moveItemsFromRequisitionList` and `copyItemsFromRequisitionList` mutations respectively
#

type Customer {
    requisition_lists(
        pageSize: Int = 20,
        currentPage: Int = 1,
        filter: RequisitionListFilterInput
    ): RequisitionLists @doc(description: "Get Requisition Lists of customer")
}

type RequisitionLists @doc(description: "Provides Customer's Requisition Lists")  {
    items: [RequisitionList]! @doc(description: "List of Requisition Lists")
    page_info: SearchResultPageInfo @doc(description: "Page Information for pagination")
    total_count: Int! @doc(description: "Total count of Requisition Lists")
}

type RequisitionList @doc(description: "Requisition List Type") {
    uid: ID! @doc(description: "Unique Identifier of Requisition List")
    name: String! @doc(description: "Name of the list")
    description: String @doc(description: "Description of the list")
    items(
        currentPage: Int = 1,
        pageSize: Int = 20
    ): RequistionListItems
    items_count: Int! @doc(description: "Number of items in list")
    updated_at: String @doc(description: "Latest Activity")
}

type RequistionListItems {
    items: [RequisitionListItemInterface]! @doc(description: "Requisition List items list")
    page_info: SearchResultPageInfo
    total_pages: Int! @doc(description: "total count of req list items")
}

interface RequisitionListItemInterface @doc(description: "Interface type for Requisition List Item") {
    uid: ID! @doc(description:"Unique Identifier of Requisition List Item")
    product: ProductInterface!
    qty: Float! @doc(description: "Quantity added")
}

type DefaultRequisitionListItem implements RequisitionListItemInterface
@doc(description: "Requisition List Item Implementation that for Simple and Virtual Products") {
    uid: ID! @doc(description: "Unique Identifier of Requisition List Item")
    product: ProductInterface!
    qty: Float! @doc(description:  "Quantity added")
    customizable_options: [SelectedCustomizableOption] @doc(description: "custom Option selected")
}

type DownloadableRequisitionListItem implements RequisitionListItemInterface
@doc(description: "Requisition List Item Implementation that for Downloadable Products") {
    uid: ID! @doc(description: "Unique Identifier of Requisition List Item")
    product: ProductInterface!
    qty: Float! @doc(description: "Quantity added")
    customizable_options: [SelectedCustomizableOption] @doc(description:  "custom Option selected")
    links: [DownloadableProductLinks] @doc(description: "DownloadableProductLinks defines characteristics of a downloadable product")
    samples: [DownloadableProductSamples] @doc(description:  "DownloadableProductSamples defines characteristics of a downloadable product")
}

type BundleRequisitionListItem implements RequisitionListItemInterface
@doc(description: "Requisition List Item Implementation that for Bundle Products") {
    uid: ID! @doc(description: "Unique Identifier of Requisition List Item")
    product: ProductInterface!
    qty: Float! @doc(description: "Quantity added")
    customizable_options: [SelectedCustomizableOption] @doc(description: "custom Option selected")
    bundle_options: [SelectedBundleOption]! @doc(description: "selected bundle options")
}

type ConfigurableRequisitionListItem implements RequisitionListItemInterface
@doc(description: "Requisition List Item Implementation that for Configurable Products") {
    uid: ID! @doc(description:  "Unique Identifier of Requisition List Item")
    product: ProductInterface!
    qty: Float! @doc(description: "Quantity added")
    customizable_options: [SelectedCustomizableOption] @doc(description: "custom Option selected")
    configurable_options: [SelectedConfigurableOption] @doc(description: "Configurable options selected")
}

type Mutation {
    createRequisitionList(
        name: String!, @doc(description: "name for the list")
        description: String @doc(description: "description For the list")
    ): CreateRequisitionListOutput @doc(description: "Create Empty Requisition List")

    renameRequisitionList(
        uid: ID!, @doc(description: "unique Id of requisition list")
        name: String!, @doc(description: "new name for list")
        description: String @doc(description: "new description For the List")
    ): RenameRequisitionListOutput @doc(description: "Rename a requisition list and change description")

    deleteRequisitionList(
        uid: ID! @doc(description: "unique Id of requisition list")
    ): DeleteRequisitionListOutput @doc(description: "Delete a requisition list with Id")

    addProductsToRequisitionList(
        uid: ID!, @doc(description: "unique Id of requisition list")
        items: [RequisitionListItemsInput!]! @doc(description: "Products to be added to requisition list")
    ): AddProductsToRequisitionListOutput @doc(description: "Add items to requisition list")

    removeRequisitionListItems(
        uid: ID!, @doc(description: "unique Id of requisition list")
        itemUids: [ID!]! @doc(description: "unique Ids of Items to be removed from requisition list")
    ): RemoveRequisitionListItemsOutput @doc(description: "Remove Items in requisition list")

    updateRequisitionListItems(
        uid: ID!, @doc(description: "unique Id of requisition list")
        items: [UpdateRequisitionListItemsInput!]! @doc(description: "Items to be updated from requisition list")
    ): UpdateRequisitionListItemsOutput @doc(description: "Update Items in requisition list")

    addRequisitionListItemsToCart(
        listUid: ID!, @doc(description: "unique Id of requisition list")
        itemUids: [ID!]! @doc(description: "selected requisition list items that are to be added")
    ): AddRequisitionListItemsToCartOutput @doc(description: "Add Requisition List Items To Customer Cart")

    copyItemsBetweenRequisitionLists(
        sourceUid: ID!, @doc(description: "unique Id of source requisition list")
        destinationUid: ID,  @doc(description: "unique Id of destination requisition list") # If null new requisition list will be created
        itemUids: [ID!]! @doc(description:  "selected requisition list items that are to be copied from source")
    ): CopyItemsBetweenRequisitionListsOutput @doc(description: "Copy Items from Requisition List to another requisition list")

    moveItemsBetweenRequisitionLists(
        sourceUid: ID!, @doc(description: "unique Id of source requisition list")
        destinationUid: ID, @doc(description: "unique Id of destination requisition list") # If null new requisition list will be created
        itemUids: [ID!]! @doc(description: "selected requisition list items that are to be moved from source")
    ): MoveItemsBetweenRequisitionListsOutput @doc(description: "Move Items from Requisition List to another requisition List")

    clearCustomerCart(
	    cartUid: String! @doc(description: "masked Cart Id")
    ): ClearCustomerCartOutput @doc(description: "Clears the cart items")
}

type RemoveRequisitionListItemsOutput {
    list : RequisitionList
}

type UpdateRequisitionListItemsOutput {
    list : RequisitionList
}

type AddProductsToRequisitionListOutput {
    list : RequisitionList
}

input RequisitionListFilterInput {
    uids: FilterEqualTypeInput, @doc(description: "Filter Customer Requisition lists with an requisition list ID or list of requisition list IDs")
    name: FilterMatchTypeInput @doc(description: "Filter by display name of the Requisition list")
}

input RequisitionListItemsInput {
    sku: String!
    quantity: Float
    parent_sku: String
    selected_options: [String!] @doc(description: "selected option ID")
    entered_options: [EnteredOptionInput!] @doc(description: "entered Options ID")
}

input UpdateRequisitionListItemsInput {
    item_id: ID! @doc(description: "unique ID of Requisition List Item")
    selected_options: [String!] @doc(description: "selected option ID")
    entered_options: [EnteredOptionInput!] @doc(description: "entered Options ID")
    quantity: Float
}

type CreateRequisitionListOutput {
    list: RequisitionList
}

type RenameRequisitionListOutput {
    list: RequisitionList
}

type DeleteRequisitionListOutput {
    requisition_list : RequisitionList
}

type AddRequisitionListItemsToCartOutput {
    cart: Cart # since requisition list is not mutated it is not part of the output
}

type CopyItemsBetweenRequisitionListsOutput {
    list : RequisitionList  @doc(description:  "Destination Requisition List")# since source requisition list is not mutated it is not part of the output
}

type MoveItemsBetweenRequisitionListsOutput {
    source : RequisitionList @doc(description:  "Source Requisition List")
    destination : RequisitionList @doc(description: "Destination Requisition List")
}

type ClearCustomerCartOutput {
    cart: Cart
}
